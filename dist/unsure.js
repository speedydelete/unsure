(()=>{"use strict";const e=["use","let","const"],t=["==","!=",">=","<="],n=["=",">","<","+","-","*","/","%","(",")"],i=(n.concat(t),/[a-zA-Z_][a-zA-Z_0-9]*/),l=/-?[0-9]+/;globalThis.unsure={tokenize:function(s){let c=[],o=1,r=0;function a(e,t,n={}){c.push({type:e,raw:s.slice(r,r+t),char:r,...n}),r+=t}for(;r<s.length;){const c=s[r];if(" "===c)a("Space",1);else if("\n"===c)a("Newline",1),o+=1;else if("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".includes(c)){const e=s.slice(r).match(i);if(null!==e){const t=e[0];a("Identifier",t.length,{id:t})}}else if(n.includes(c))t.includes(s.slice(r,r+2))?a("Operator",2,{op:s.slice(r,r+2)}):a("Operator",1,{op:c});else if("0123456789-".includes(c)){const e=s.slice(r).match(l);if(null!==e){const t=e[0];a("IntLiteral",t.length,{value:parseInt(t)})}}else{let t=!1;for(const n of e)if(s.startsWith(n)){a("Keyword",n.length,{value:n}),t=!0;break}if(!t)throw new SyntaxError(`unrecognized token on character ${s.length-r} (line ${o}), starting with "${s.slice(r,r+10)}"`)}}return c}}})();